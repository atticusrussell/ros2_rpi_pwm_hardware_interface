
name: CI Industrial Pi

on: 
  push:
  pull_request:
  workflow_dispatch: 

jobs:
  build_ubuntu_22_04_rpi3:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v3 # clone target repository
    - uses: pguyot/arm-runner-action@HEAD
      with:
        base_image: https://cdimage.ubuntu.com/releases/22.04.2/release/ubuntu-22.04.2-preinstalled-server-arm64+raspi.img.xz
        cpu: cortex-a7
        cpu_info: cpuinfo/raspberrypi_zero2_w_arm64 
        optimize_image: false
        image_additional_mb: 8096
        commands: |
          echo "Emulated Pi info"
          cat /etc/os-release
          uname -a
          ls -la
          grep Model /proc/cpuinfo
          pwd
          echo "CURRENT_DIR=$(pwd)" >> $GITHUB_ENV
          
          echo "installing pigpio"
          cd ~
          wget https://github.com/joan2937/pigpio/archive/master.zip
          unzip master.zip
          cd pigpio-master
          make
          sudo make install
    
          echo "test pigpio library on the emulated Pi"
          sudo ./x_pigpio
          sudo pigpiod
          ./x_pigpiod_if2
          ./x_pigs
          ./x_pipe



# jobs:
#   industrial_ci:
#     name: ROS ${{ matrix.ROS_DISTRO }} (${{ matrix.ROS_REPO }})
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         ROS_DISTRO: [humble]
#         ROS_REPO: [main]
#     env:
#       CCACHE_DIR: "${{ github.workspace }}/.ccache" 
#     steps:


#     - name: Install pigpio library on the emulated Pi
#       run: |
#         echo '#!/bin/bash' > install_pigpio.sh
#         echo 'cd ~' >> install_pigpio.sh
#         echo 'wget https://github.com/joan2937/pigpio/archive/master.zip' >> install_pigpio.sh
#         echo 'unzip master.zip' >> install_pigpio.sh
#         echo 'cd pigpio-master' >> install_pigpio.sh
#         echo 'make' >> install_pigpio.sh
#         echo 'sudo make install' >> install_pigpio.sh
#         echo 'sudo ./x_pigpio # check C I/F' >> install_pigpio.sh
#         echo 'sudo pigpiod    # start daemon' >> install_pigpio.sh
#         echo './x_pigpiod_if2 # check C      I/F to daemon' >> install_pigpio.sh
#         echo './x_pigpio.py   # check Python I/F to daemon' >> install_pigpio.sh
#         echo './x_pigs        # check pigs   I/F to daemon' >> install_pigpio.sh
#         echo './x_pipe        # check pipe   I/F to daemon' >> install_pigpio.sh
#         chmod +x install_pigpio.sh
#         qemu-system-aarch64 -machine type=raspi3 -m 1024 -kernel vmlinux -initrd initramfs -init /home/user/install_pigpio.sh
      
    # - uses: actions/checkout@v3 # clone target repository
      
    # - uses: actions/cache@v2 # fetch/store the directory used by ccache before/after the ci run
    #   with:
    #     path: ${{ env.CCACHE_DIR }}
    #     # This configuration will always create a new ccache cache starting off from the previous one (if any).
    #     # In this simple version it will be shared between all builds of the same ROS_REPO and ROS_REPO
    #     # and might need some fine-tuning to match the use case
    #     key: ccache-${{ matrix.ROS_DISTRO }}-${{ matrix.ROS_REPO }}-${{github.run_id}}
    #     restore-keys: |
    #       ccache-${{ matrix.ROS_DISTRO }}-${{ matrix.ROS_REPO }}-
    # - uses: 'ros-industrial/industrial_ci@master' # run industrial_ci
    #   env: # either pass all entries explicitly
    #     ROS_DISTRO: ${{ matrix.ROS_DISTRO }}
    #     ROS_REPO: ${{ matrix.ROS_REPO }}
    #   # with: # or pass the full matrix as config
    #   #    config: ${{toJSON(matrix)}}
